@page "/docs"
@using System.IO
@using VigenereCipher.Data
@inject IJSRuntime JSRuntime
@inject IMatToaster Toaster

<div>
    <div class="wrapper">
        <div class="left">
            <div style="margin-bottom: 20px">
                <MatStringField @bind-Value="@Key" Label="Key" Icon="vpn_key" Outlined="true" Required="true"></MatStringField>
            </div>
            <div style="margin-top: 15px">
                <MatSelectItem @bind-Value="@Crypt" Label="Cryptor mode" Items="@_cryptItems"></MatSelectItem>
            </div>
            <div style="margin-top: 15px">
                <MatSelectItem @bind-Value="@Language" Label="Language" Items="@_languageItems"></MatSelectItem>
            </div>
        </div>
        <div class="right" style="width: 100%">
            <MatFileUpload OnChange="@FilesReadyForContent"></MatFileUpload>
            <p>Single file size limit: 10MB. Allowed file types: DOCX, TXT</p>
            <p>@FileName</p>
        </div>
    </div>
    <div style="padding: 10px">
        <MatButton Raised="true" OnClick="@Start">Start</MatButton>
    </div>
</div>
<div class="mat-elevation-z5" style="padding: 15px; margin-top: 10px">
    <div style="padding: 5px">
        <MatTextField @bind-Value="@OutputText" TValue="string" Label="New text" FullWidth="true" TextArea="true" Rows="10" ReadOnly="true"></MatTextField>
    </div>
</div>
<div style="margin-top: 10px">
    <MatStringField @bind-Value="@SavedFileName" Label="File name" Icon="insert_drive_file" Required="true"></MatStringField>
    <MatButton Raised="true" OnClick="@Download">Save result as .txt</MatButton>
    <MatButton Raised="true" OnClick="@DownloadDocx">Save result as .docx</MatButton>
</div>

@code
{
    private string OutputText { get; set; }
    private string Key { get; set; }
    private Cipher.CryptMode Crypt { get; set; }
    readonly Cipher.CryptMode[] _cryptItems = Enum.GetValues(typeof(Cipher.CryptMode)).Cast<Cipher.CryptMode>().ToArray();
    private Cipher.LanguageMode Language { get; set; }
    readonly Cipher.LanguageMode[] _languageItems = Enum.GetValues(typeof(Cipher.LanguageMode)).Cast<Cipher.LanguageMode>().ToArray();
    private Document _file = new Document();
    private string FileName { get; set; }
    private string SavedFileName { get; set; }

    private static bool CheckFileFormat(IMatFileUploadEntry file)
    {
        var fileFormat = file.Name.Split('.').Last();
        return fileFormat == "docx" || fileFormat == "txt";
    }

    private async void Start()
    {
        try
        {
            if (_file.GetContent() != null)
            {
                OutputText = DocumentService.GetResultDocumentAsync(_file, Language, Key, Crypt);
                ShowSuccessCrypt(Crypt);
            }
            else
            {
                ShowError("The encryption/decryption file was not found. Upload the file.");
            }
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }
            if (!CheckFileFormat(file))
            {
                ShowError("The file format is not supported. Upload DOCX or TXT.");
                return;
            }
            if (file.Size > 1024 * 1024 * 10)
            {
                ShowError("A file larger than 10 MB.");
            }
            else
            {
                _file = await new Document().UploadFile(file);
                FileName = file.Name;
                ShowSuccessUploading();
            }
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ShowError(string error)
    {
        Toaster.Add(error, MatToastType.Danger, "Error");
    }

    private void ShowSuccessCrypt(Cipher.CryptMode crypt)
    {
        switch (crypt)
        {
            case Cipher.CryptMode.Decrypt:
                Toaster.Add("The text has been successfully decrypted.", MatToastType.Success, "Successfully");
                break;
            case Cipher.CryptMode.Encrypt:
                Toaster.Add("The text has been successfully encrypted.", MatToastType.Success, "Successfully");
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(crypt), crypt, null);
        }
    }

    private void ShowSuccessUploading()
    {
        Toaster.Add("The file was uploaded successfully.", MatToastType.Success, "Successfully");
    }

    private async void Download()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SavedFileName) || string.IsNullOrWhiteSpace(OutputText))
            {
                ShowError("There is no file name or result to save.");
            }
            else
            {
                var newFileName = Path.GetInvalidFileNameChars().Aggregate(SavedFileName, (current, invalidChar) => current.Replace(invalidChar.ToString(), "_"));

                await JSRuntime.InvokeAsync<object>(
                    "FileSaveAs",
                    newFileName + ".txt",
                    OutputText
                    );
            }
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }
    }

    private async void DownloadDocx()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SavedFileName) || string.IsNullOrWhiteSpace(OutputText))
            {
                ShowError("There is no file name or result to save.");
            }
            else
            {
                var newFileName = Path.GetInvalidFileNameChars().Aggregate(SavedFileName, (current, invalidChar) => current.Replace(invalidChar.ToString(), "_"));
                var content = DocumentService.DownloadDocxFromText(OutputText);
                await JSRuntime.InvokeAsync<object>(
                    "DocxFileSaveAs",
                    newFileName + ".docx",
                    Convert.ToBase64String(content)
                    );
            }
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }
    }
}