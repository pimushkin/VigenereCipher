@page "/docs"
@using VigenereCipher.Data
@inject IJSRuntime JSRuntime
@inject IMatToaster Notification

<div>
    <div class="wrapper">
        <div class="left">
            <div style="margin-bottom: 20px">
                <MatStringField @bind-Value="@Key" Label="Key" Icon="vpn_key" Outlined="true" Required="true"></MatStringField>
            </div>
            <div style="margin-top: 15px">
                <MatSelectItem @bind-Value="@Crypt" Label="Cryptor mode" Items="@_cryptItems"></MatSelectItem>
            </div>
            <div style="margin-top: 15px">
                <MatSelectItem @bind-Value="@Language" Label="Language" Items="@_languageItems"></MatSelectItem>
            </div>
        </div>
        <div class="right" style="width: 100%">
            <MatFileUpload OnChange="@UploadFile"></MatFileUpload>
            <p>Single file size limit: 10MB. Allowed file types: DOCX, TXT</p>
            <p>@FileName</p>
        </div>
    </div>
    <div style="padding: 10px">
        <MatButton Raised="true" OnClick="@Start">Start</MatButton>
    </div>
</div>
<div class="mat-elevation-z5" style="padding: 15px; margin-top: 10px">
    <div style="padding: 5px">
        <MatTextField @bind-Value="@OutputText" TValue="string" Label="Result text" FullWidth="true" TextArea="true" Rows="10" ReadOnly="true"></MatTextField>
    </div>
</div>
<div style="margin-top: 10px">
    <MatStringField @bind-Value="@SavedFileName" Label="File name" Icon="insert_drive_file" Required="true"></MatStringField>
    <MatButton Raised="true" OnClick="@DownloadTxt">Save result as .txt</MatButton>
    <MatButton Raised="true" OnClick="@DownloadDocx">Save result as .docx</MatButton>
</div>

@code
{
    private string OutputText { get; set; }
    private string Key { get; set; }
    private Cipher.CryptMode Crypt { get; set; }
    readonly Cipher.CryptMode[] _cryptItems = Enum.GetValues(typeof(Cipher.CryptMode)).Cast<Cipher.CryptMode>().ToArray();
    private Cipher.LanguageMode Language { get; set; }
    readonly Cipher.LanguageMode[] _languageItems = Enum.GetValues(typeof(Cipher.LanguageMode)).Cast<Cipher.LanguageMode>().ToArray();
    private Document _file = new Document();
    private string FileName { get; set; }
    private string SavedFileName { get; set; }

    private async Task Start()
    {
        try
        {
            if (_file.GetContent() != null)
            {
                OutputText = DocumentService.GetResultFileAsync(_file, Language, Key, Crypt);
                Notification.ShowSuccessCrypt(Crypt);
            }
            else
            {
                Notification.ShowError("The encryption/decryption file was not found. Upload the file.");
            }
        }
        catch (Exception e)
        {
            Notification.ShowError(e.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UploadFile(IMatFileUploadEntry[] files)
    {
        try
        {
            _file = await UploadService.UploadFileAsync(files);
            FileName = files.FirstOrDefault()?.Name;
            Notification.ShowSuccessUploading();
        }
        catch (Exception e)
        {
            Notification.ShowError(e.Message);
        }
    }

    private async Task DownloadTxt()
    {
        try
        {
            await JSRuntime.DownloadTxtFileAsync(SavedFileName, OutputText);
        }
        catch (Exception e)
        {
            Notification.ShowError(e.Message);
        }
    }

    private async Task DownloadDocx()
    {
        try
        {
            await JSRuntime.DownloadDocxFileAsync(SavedFileName, OutputText);
        }
        catch (Exception e)
        {
            Notification.ShowError(e.Message);
        }
    }
}