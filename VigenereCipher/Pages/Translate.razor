@page "/translate"
@using VigenereCipher.Data
@inject CipherService CipherService
@inject IMatToaster Notification
@inject IJSRuntime JSRuntime


<div>
    <div class="wrapper">
        <div class="left">
            <div class="mat-elevation-z5" style="padding: 15px">
                <MatTextField @bind-Value="@InputText" PlaceHolder="Enter text" FullWidth="true" TextArea="true" Rows="10" Required="true"></MatTextField>
            </div>
        </div>
        <div class="right" style="margin-left: 30px">
            <div class="mat-elevation-z5" style="padding: 15px">
                <MatTextField @bind-Value="@OutputText" Label="Result text" FullWidth="true" ReadOnly="true" TextArea="true" Rows="10"></MatTextField>
            </div>
        </div>
    </div>
    <div style="margin-top: 30px">
        <MatStringField @bind-Value="@Key" Label="Key" Icon="vpn_key" Outlined="true" Required="true"></MatStringField>
    </div>
    <div style="margin-top: 15px">
        <MatSelectItem @bind-Value="@Crypt" Label="Cryptor mode" Items="@_cryptItems"></MatSelectItem>
    </div>
    <div style="margin-top: 15px">
        <MatSelectItem @bind-Value="@Language" Label="Language" Items="@_languageItems"></MatSelectItem>
    </div>
    <div style="margin-top: 10px">
        <MatButton Raised="true" OnClick="@Start">Start</MatButton>
    </div>
    <div style="margin-top: 10px">
        <MatStringField @bind-Value="@SavedFileName" Label="File name" Icon="insert_drive_file" Required="true"></MatStringField>
        <MatButton Raised="true" OnClick="@DownloadTxt">Save result as .txt</MatButton>
        <MatButton Raised="true" OnClick="@DownloadDocx">Save result as .docx</MatButton>
    </div>
</div>

@code
{
    private string InputText { get; set; }
    private string Key { get; set; }
    private string OutputText { get; set; }
    private string SavedFileName { get; set; }
    private Cipher.CryptMode Crypt { get; set; }
    readonly Cipher.CryptMode[] _cryptItems = Enum.GetValues(typeof(Cipher.CryptMode)).Cast<Cipher.CryptMode>().ToArray();
    private Cipher.LanguageMode Language { get; set; }
    readonly Cipher.LanguageMode[] _languageItems = Enum.GetValues(typeof(Cipher.LanguageMode)).Cast<Cipher.LanguageMode>().ToArray();

    private async Task Start()
    {
        try
        {
            OutputText = await CipherService.GetResultTextAsync(InputText, Language, Key, Crypt);
            Notification.ShowSuccessCrypt(Crypt);
        }
        catch (Exception e)
        {
            Notification.ShowError(e.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task DownloadTxt()
    {
        try
        {
            await JSRuntime.DownloadTxtFileAsync(SavedFileName, OutputText);
        }
        catch (Exception e)
        {
            Notification.ShowError(e.Message);
        }
    }

    private async Task DownloadDocx()
    {
        try
        {
            await JSRuntime.DownloadDocxFileAsync(SavedFileName, OutputText);
        }
        catch (Exception e)
        {
            Notification.ShowError(e.Message);
        }
    }
}