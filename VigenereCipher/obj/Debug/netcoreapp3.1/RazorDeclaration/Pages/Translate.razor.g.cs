#pragma checksum "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\Pages\Translate.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "92271c9f15bc1230e21a235883fd1bd581bef460"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace VigenereCipher.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using VigenereCipher;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using VigenereCipher.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\_Imports.razor"
using Microsoft.Win32;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\Pages\Translate.razor"
using VigenereCipher.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\Pages\Translate.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/translate")]
    public partial class Translate : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 42 "D:\ИТМО\Курс C#\Практика\Курсовая работа\VigenereCipher\VigenereCipher\Pages\Translate.razor"
 
    private string InputText { get; set; }
    private string Key { get; set; }
    private string OutputText { get; set; }
    private string SavedFileName { get; set; }
    private Cipher.CryptMode Crypt { get; set; }
    readonly Cipher.CryptMode[] _cryptItems = Enum.GetValues(typeof(Cipher.CryptMode)).Cast<Cipher.CryptMode>().ToArray();
    private Cipher.LanguageMode Language { get; set; }
    readonly Cipher.LanguageMode[] _languageItems = Enum.GetValues(typeof(Cipher.LanguageMode)).Cast<Cipher.LanguageMode>().ToArray();

    private async void Start()
    {
        try
        {
            OutputText = await CipherService.GetResultTextAsync(InputText, Language, Key, Crypt);
            ShowSuccess(Crypt);
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ShowError(string error)
    {
        Toaster.Add(error, MatToastType.Danger, "Error");
    }

    private void ShowSuccess(Cipher.CryptMode crypt)
    {
        switch (crypt)
        {
            case Cipher.CryptMode.Decrypt:
                Toaster.Add("The text has been successfully decrypted.", MatToastType.Success, "Successfully");
                break;
            case Cipher.CryptMode.Encrypt:
                Toaster.Add("The text has been successfully encrypted.", MatToastType.Success, "Successfully");
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(crypt), crypt, null);
        }
    }


    private async void Download()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SavedFileName) || string.IsNullOrWhiteSpace(OutputText))
            {
                ShowError("There is no file name or result to save.");
            }
            else
            {
                var newFileName = Path.GetInvalidFileNameChars().Aggregate(SavedFileName, (current, invalidChar) => current.Replace(invalidChar.ToString(), "_"));
                await JSRuntime.InvokeAsync<object>(
                    "FileSaveAs",
                    newFileName + ".txt",
                    OutputText
                    );
            }
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }
    }
    
    private async void DownloadDocx()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SavedFileName) || string.IsNullOrWhiteSpace(OutputText))
            {
                ShowError("There is no file name or result to save.");
            }
            else
            {
                var newFileName = Path.GetInvalidFileNameChars().Aggregate(SavedFileName, (current, invalidChar) => current.Replace(invalidChar.ToString(), "_"));
                var content = DocumentService.DownloadDocxFromText(OutputText);
                await JSRuntime.InvokeAsync<object>(
                    "DocxFileSaveAs",
                    newFileName + ".docx",
                    Convert.ToBase64String(content)
                    );
            }
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CipherService CipherService { get; set; }
    }
}
#pragma warning restore 1591
